name: Deploy

on:
  # Automatically start pipeline
  workflow_dispatch:
    # This pipeline will only execute when pushing to master
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  # install:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Cypress install
  #       uses: cypress-io/github-action@v6
  #       with:
  #         # Disable running of tests withim install job
  #         runTests: false
  #         build: npm run build

  #     - name: Save build folder
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: build
  #         if-no-files-found: error
  #         path: build

  # cypress-run:
  #   runs-on: ubuntu-latest
  #   needs: install
  #   # Cypress Docker Image for Chrome
  #   container:
  #     image: cypress/browsers:22.12.0
  #     options: --user 1001
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Download the build folder
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build
  #         path: build

  #     - name: Cypress run
  #       uses: cypress-io/github-action@v6
  #       with:
  #         start: npm start
  #         browser: chrome
  cypress-run:
    runs-on: ubuntu-latest
    # Runs tests in parallel with matrix strategy https://docs.cypress.io/guides/guides/parallelization
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    # Also see warning here https://github.com/cypress-io/github-action#parallel
    strategy:
      fail-fast: false # https://github.com/cypress-io/github-action/issues/48
      matrix:
        containers: [1, 2] # Uses 2 parallel instances
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Cypress run
        # Uses the official Cypress GitHub action https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v6
        with:
          # Starts web server for E2E tests - replace with your own server invocation
          # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
          start: npm run dev
          wait-on: 'http://localhost:3000' # Waits for above
          # Records to Cypress Cloud
          # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
          record: true
          parallel: true # Runs test in parallel using settings above
          browser: chrome
        env:
          # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
          # in GitHub repo → Settings → Secrets → Actions
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Creating a token https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-artifacts
          path: cypress/screenshots,cypress/videos

  deploy:
    # OS for remote machine
    runs-on: ubuntu-latest

    steps:
      # Perform git checkout to fetch code from latest branch. This is to prevent merge conflicts
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: '8.15.1'

        # Next two steps are needed to cache pnpm dependencies
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

        # Similarly to Vercel, I cache the build output to reduce redeploy times
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503561410637:role/github-ci-cd
          aws-region: us-east-1

      - name: Validate IAM Policies
        run: |
          for file in $(find policies/ -name "*.json"); do
            echo "Validating $file"
            output=$(aws accessanalyzer validate-policy --policy-type IDENTITY_POLICY --policy-document file://$file)
            echo "$output"
            if echo "$output" | grep -q '"findingType": "ERROR"'; then
              error=$(echo "$output" | jq -r ".findings[].issueCode")
              echo "Policy validation failed for $file with ERROR: $error"
              exit 1
            fi
            echo "Policies successfully validated!"
          done

      - name: Deploy with SST
        run: |
          npx sst deploy --stage production
