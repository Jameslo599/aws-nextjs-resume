name: Deploy

on:
  # Automatically start pipeline
  workflow_dispatch:
    # This pipeline will only execute when pushing to master
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    # OS for remote machine
    runs-on: ubuntu-latest

    steps:
      # Perform git checkout to fetch code from latest branch. This is to prevent merge conflicts
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: '8.15.1'

        # Next two steps are needed to cache pnpm dependencies
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

        # Similarly to Vercel, I cache the build output to reduce redeploy times
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503561410637:role/github-ci-cd
          aws-region: us-east-1

      - name: Validate IAM Policies
        run: |
          for file in $(find policies/ -name "*.json"); do
            aws accessanalyzer validate-policy --policy-type IDENTITY_POLICY --policy-document file://$file
          done

      # - name: Deploy with SST
      #   run: |
      #     npx sst deploy --stage production
